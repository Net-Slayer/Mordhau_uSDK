// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "Mordhau.h"
#include "MordhauMotion.h"
#include "AttackMotion.generated.h"

/**
 * 
 */
UCLASS()
class MORDHAU_API UAttackMotion : public UMordhauMotion
{
	GENERATED_BODY()
public:
	UPROPERTY()
	TArray<struct FVector>  VisualizeAttackAccelerationTraces;   //(ZeroConstructor)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bShowAutomaticBlendingDebug;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bShowAutomaticBlendingVisualDebug;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bShowWindUpSmoothingDebug;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bUsesTrail;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float PlayAttackYellTimeReleaseOffset;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float WooshTimeFactor;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bWantsSlowLookSmoothingInRecovery;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FVector2D  AnglingLimits;  //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveHighMidLowSpineSpaceAdditive AnglingAdditiveWindUp;   //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FHighMidLowSpineSpaceAdditive   AnglingAdditiveRelease;  //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveHighMidLowSpineSpaceAdditive RiposteAnglingAdditiveWindUp;  //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FHighMidLowSpineSpaceAdditive   RiposteAnglingAdditiveRelease; //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float ExperimentalLiveRecoveryDuration; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  LiveRecoveryHitsAreThuds;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bIncludeMissingDeltaTime;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float TraceMemoryStayDuration; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float MaxParryAngleForChamberAndActiveParry;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float MaxParryWeaponAngleForChamberAndActiveParry;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	int   ActiveParryStaminaCost;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float ActiveParryWindow; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bCanBeParriedInEarlyRelease;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bCanBeParriedByForwardCollider;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bCanBeParriedByForwardColliderInEarlyRelease; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float ClashAngle;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float EarlyReleaseIsClashableAfter;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float ChamberWindow;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	int   ChamberStaminaRecover;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float ToChamberAttackAngleTolerance; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float GlanceDamageModifier; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bStopOnHitOnKills; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bCanTraceHitUsingShieldBlockCollider;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bStunsHeldBlock;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bIsComboFromMiss;  //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float MinAngleToRearHorse;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float MissTwiceStaminaCostMultiplier;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float RiposteTradeDamageFactor;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float RiposteWindUpCanParryWindow;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float HitRecovery; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float HitStopRecovery;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float ClashedRecovery;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveFloat   MissRecoveryToPlayRate;  //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveVector2D   MissRecoveryPlayRateClamp;  //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float RecoveryQueueWindow;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	class UAnimMontage*  BounceMontage;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveAnimSequence  BounceAdditive; //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveCurveFloat WorldBounceCurve;  //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveCurveFloat WorldBounceScaleCurve;   //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveCurveFloat ParryBounceCurve;  //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveCurveFloat ParryLateBounceCurve; //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveCurveFloat ParryBounceScaleCurve;   //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float EarlyRelease;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float EarlyReleaseTimeFactor;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float RiposteEarlyRelease;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float RiposteEarlyReleaseTimeFactor; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float StrikeAnimationNormalizedRecoveryOffset;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	class UCurveFloat*   SupersprintDurationByRangeCurve;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float SupersprintStartOffset;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float SupersprintDuration;  //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float FeintWindow; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float ComboFeintWindow;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bIsRiposteFeintable;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bCanAttackFromFeintLockout; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveFloat   FeintAnimRate;  //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveFloat   FeintAnimDurationOffset; //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveFloat   FeintAnimMinimumDuration;   //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bCanAutoFeintToAttack;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY()
	bool  bRiposteAteFeintInput;   //(ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float MinWindUpTimeBeforeMorphing;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float MorphWindow; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float MorphWindupModifier;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	class UCurveFloat*   MorphWindupCurve;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float MaxMorphTotalTime; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float MorphKickExtraTime;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float ReleaseJumpBlockTime; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bPerformWeaponSlidingSparks;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveBool RegularAttacksUseAutoBlendIn;  //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveBool RiposteAttacksUseAutoBlendIn;  //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveBool ComboAttacksUseAutoBlendIn; //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveBool PostClashAttacksUseAutoBlendIn;   //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveBool MorphAttacksUseAutoBlendIn; //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveCurveFloat AutoBlendInWeaponCurve;  //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float AutoBlendConsiderUpVectorIfLargerThanAngle;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveCurveFloat AutoBlendInSpineCurve;   //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	int   AutoBlendOptimizeForwardSteps; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	int   RiposteAutoBlendOptimizeForwardSteps;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float AutoBlendOptimizeForwardStepSize; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveFloat   NormalBlendIn;  //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveFloat   NormalSlowBlendIn; //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveFloat   NormalParrySlowBlendIn;  //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveFloat   ComboBlendIn;   //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveFloat   PostClashBlendIn;  //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveFloat   MorphBlendIn;   //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveFloat   RiposteBlendIn; //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveFloat   RiposteWithShieldBlendIn;   //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	class UCurveFloat*   BlendInCurve;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveCurveFloat ComboBlendInCurve; //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	class UCurveFloat*   MorphBlendInCurve; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	class UCurveFloat*   RiposteBlendInCurve;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float BlendIn;  //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bUseAutomaticBlendIn; //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveAnimSequenceBase Animation;   //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveAnimSequenceBase RiposteAnimation;  //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveAnimSequenceBase AltRiposteAnimation;  //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveAnimSequenceBase ClashAnimation; //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	class UAnimMontage*  LeftTorsoMontage;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	class UAnimMontage*  RiposteLeftTorsoMontage; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveFloat   BlendOut; //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveFloat   SuccessfulHitBlendOutAnimTime; //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveFloat   SuccessfulHitPlayRate;   //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveBool EnableWindUpSmoothing;   //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FVector2D  WindUpSmoothingExponentClamp;  //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	class UCurveFloat*   WindUpCurve; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FPerspectiveCurveFloat ComboWindUpCurve;  //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float AnimationTimeFor3PTransition;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	class UCurveFloat*   ReleaseCurve;   //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	class UCurveFloat*   RiposteReleaseCurve;  //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadOnly, VisibleAnywhere)
	EAttackMove ComingFromMove; //(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	class UParryMotion*  ComingFromAsParry; //(ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	struct FAttackInfo   AttackInfo;  //(BlueprintVisible)
	UPROPERTY()
	struct FSpineSpaceAdditive TargetAdditive;
	UPROPERTY()
	struct FSpineSpaceAdditive WindUpAdditive;
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float AngleTarget; //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float LastReleaseNormalizedTime;  //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float LastWindupNormalizedTime;   //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bHasHitFriendly;   //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	EAttackType Type;  //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	EAttackMove Move;  //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float WindupEnd;   //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float ReleaseEnd;  //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY()
	class UAnimMontage*  Montage;  //(ZeroConstructor, IsPlainOldData)
	UPROPERTY()
	class UAnimSequenceBase*   QueuedAnimFor3PRelease;  //(ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	class AMordhauWeapon*   Weapon;   //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	class UAttackMotion* PreviousLastAttackMotion;   //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bHasQueuedServerCombo;   //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float QueuedServerComboAngle;  //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	EAttackMove QueuedServerComboMove;   //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bHasQueuedMove; //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float QueuedAngle; //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	EAttackMove QueuedMove;  //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	EAttackStage   Stage; //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bHasHit;  //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bHasPreviousAttackHit;   //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bHasHitIncludingCosmeticHit;   //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float FirstHitTime;   //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	float FirstHitIncludingCosmeticReleaseNormalizedTime;  //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool  bHasChambered;  //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	
	UFUNCTION(BlueprintCallable)
	void SetHasHitIncludingCosmeticHit(bool bPlayHitShake);
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void PrepareAnimationData();
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	bool OverrideTrace(struct FVector& OutStart, struct FVector& OutEnd);
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	bool OverrideIsUsingAdditionalTracers(bool& OutResult);
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	bool OverrideAdditionalTrace(struct FVector& OutStart, struct FVector& OutEnd);
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void ModifyAttackInfo();
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	class AMordhauWeapon* FindWeapon();
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	float ComputeWindup();


};
