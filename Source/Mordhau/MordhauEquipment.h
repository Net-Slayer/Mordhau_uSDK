// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "MordhauActor.h"
#include "Mordhau.h"
#include "MordhauProjectile.h"
#include "MordhauEquipment.generated.h"

/**
*
*/
UCLASS(Blueprintable)
class MORDHAU_API AMordhauEquipment : public AMordhauActor
{
	GENERATED_BODY()

public:

	AMordhauEquipment();

	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category="Enums")
		EAuxiliaryMeshMode AuxiliaryMeshMode; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category="Enums")
		EEquipmentCategory EquipmentUICategory; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category="Enums")
		EEquipmentType EquipmentUIType; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category="Enums")
		EMovementRestriction MovementRestriction; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category="Enums")
		EMovementRestriction RangedDrawMovementRestriction; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category="Enums")
		EMovementRestriction RangedReleaseMovementRestriction; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category="Enums")
		EMovementRestriction ReloadMovementRestriction; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category="Names")
		FName AttachedToSocket; //(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category="Names")
		FName MaxAmmoBoxRestockAmountCategory; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category="Text")
		FText EquipmentName; //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category="Arrays")
		TArray<FName> EquipmentTraitNames; //(Edit, BlueprintVisible, ZeroConstructor)
	UPROPERTY()
		TArray<TWeakObjectPtr<class UMeshComponent>> MeshComponents; //(ExportObject, ZeroConstructor)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Arrays")
		TArray<class UAnimMontage*> CharacterPreviewPoses; //(Edit, BlueprintVisible, ZeroConstructor)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Arrays")
		TArray<class UClass*> RestockAmmoForEquipment; //(Edit, BlueprintVisible, ZeroConstructor)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Arrays")
		TArray<class UMordhauEquipmentPart*> PartInstances; //(BlueprintVisible, ZeroConstructor)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Arrays")
		TArray<struct FEmoteEntry> EquipmentEmotes; //(Edit, BlueprintVisible, ZeroConstructor)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Arrays")
		TArray<struct FEquipmentHolsterInfo> HolsterInfo; //(Edit, BlueprintVisible, ZeroConstructor)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Arrays")
		TArray<struct FEquipmentSkinEntry> Skins; //(Edit, BlueprintVisible, ZeroConstructor)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		TEnumAsByte<EPhysicalSurface> EquipmentPhysicalSurface; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Maps")
		TMap<FString, FText> ActionToDescriptionMap; //(Edit, BlueprintVisible, ZeroConstructor)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Maps")
		TMap<FString, FText> SecondActionToDescriptionMap; //(Edit, BlueprintVisible, ZeroConstructor)
	UPROPERTY()
		TWeakObjectPtr<class AMordhauCharacter> ParentCharacter; //(ZeroConstructor, IsPlainOldData)
	UPROPERTY()
		TWeakObjectPtr<class AMordhauCharacter> YoinkTrackingParentCharacter; //(ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bAllowCancelDraw; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bAllowCleanup; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bAllowDrop; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bAllowFire; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bAllowHoldDraw; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bAlwaysDestroyOnDeath; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bAutoAssignCustomizationOnBeginPlay; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bCanAttack; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bCanAttackOnFoot; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bCanAttackOnHorseback; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bCanBeChasedFromFront; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bCanEquipOnHorse; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bCanEquipOnLadder; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bCanHolster; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bCanRagdoll; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bCanReload; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bCanRestockFromEquipmentDefaults; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bCanThrowPommel; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bCannotChaseOthers; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bDeferDestroyUntilRagdoll; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bDestroyIfNoAmmo; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bDisableHandSpringAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bDisableSpineArmsCompensation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bDisablesDodge; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bDoNotDisarmOnMeleeWeaponHit; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bDoNotFireAfterMaxHoldDrawTime; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bFireThrowsEquipment; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bForceEquipmentToAlwaysTick; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bForceInstantMeshUpdate; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bForceMaxLOD; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bForceMipStreaming; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bForceRefPoseOnMesh; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bForceTeamColor1; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bForceTeamColor2; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bHasAlternateMode; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bHasColor1; //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bHasColor2; //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bHasColor3; //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bHasReplicatedColors; //(ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bHasReplicatedEmblem; //(ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bHasReplicatedEmblemColors; //(ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bHasReplicatedPartsId; //(ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bHasReplicatedPattern; //(ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bHasReplicatedSkin; //(ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bHeldInteractIsSwap; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bHiddenWhenUnloaded; //(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bInvertOffhandUp; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bIsAllowedForPeasants; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bIsEmotingAllowed; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bIsFollowingProjectile; //(ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bIsHeldInHand; //(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bIsLoaded; //(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bIsParentInFirstPerson; //(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bIsRangedSwayCameraBased; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bIsRightHanded; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bIsStateDirty; //(ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bIsTwoHanded; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bIsUsingAlternateMode; //(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bLoadOnUnequip; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bOnlyPeasants; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bPartsUseAuxiliaryMesh; //(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bPreventsClimbing; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bQuickthrowOnly; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bRangedActionAllowsRegen; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bRangedReleasePlaysAttackYell; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bRevertModeOnDrop; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bRevertModeOnUnequip; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bSecondCanEquipOnHorse; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bSecondCanEquipOnLadder; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bSecondInvertOffhandUp; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bSecondIsRightHanded; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bSecondIsTwoHanded; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bSecondUseEquippedOffset; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bSecondUsesOffhandIK; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bTakesHuntsmanDamage; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bUnloadOnUnequip; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bUseEquippedOffset; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bUsesOffhandIK; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bUsesPhysicsProxy; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bUsesRangedCamera; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bWantsTick; //(ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bWantsToRebuildParts; //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Booleans")
		bool bWasLastParentCharacterLocalPlayer; //(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class AMordhauProjectile* CurrentProjectile; //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class APhysicsProxy* PhysicsProxy; //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* DropAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* InteractWith1PAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* InteractWithAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* KickBounce; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* ModeSwitchAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* QuickthrowAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* QuickthrowAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* RangedDrawAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* RangedDrawAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* RangedDrawEquipmentAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* RangedDrawEquipmentAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* RangedReleaseAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* RangedReleaseAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* RangedReleaseEquipmentAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* RangedReleaseEquipmentAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* ReloadAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* ReloadAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* ReloadEquipmentAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* ReloadEquipmentAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* SecondDropAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* SecondInteractWith1PAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* SecondInteractWithAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimMontage* SecondModeSwitchAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* FallingAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* FallingAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* FallingAnimationShield1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* FallingAnimationShield; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* FallingUnloadedAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* FallingUnloadedAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* HorseUpperAdditive1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* HorseUpperAdditive; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* HorseUpperAdditiveUnloaded1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* HorseUpperAdditiveUnloaded; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* HorseUpperJump1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* HorseUpperJump; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* HorseUpperRearing1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* HorseUpperRearing; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* JumpAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* JumpAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* JumpAnimationShield1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* JumpAnimationShield; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* JumpUnloadedAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* JumpUnloadedAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* LandAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* LandAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* LandAnimationShield1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* LandAnimationShield; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* LandUnloadedAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* LandUnloadedAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* LowerAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* SecondFallingAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* SecondFallingAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* SecondFallingUnloadedAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* SecondFallingUnloadedAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* SecondJumpAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* SecondJumpAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* SecondJumpUnloadedAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* SecondJumpUnloadedAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* SecondLandAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* SecondLandAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* SecondLandUnloadedAnimation1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* SecondLandUnloadedAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* SecondLowerAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* SecondUpperAdditive1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* SecondUpperAdditive; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* SecondUpperAdditiveUnloaded1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* SecondUpperAdditiveUnloaded; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* ShieldHorseUpperAdditive1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* ShieldHorseUpperAdditive; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* ShieldLowerAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* ShieldUpperAdditive1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* ShieldUpperAdditive; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* UpperAdditive1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* UpperAdditive; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* UpperAdditiveUnloaded1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequence* UpperAdditiveUnloaded; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequenceBase* JumpKickAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequenceBase* JumpKickComboAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequenceBase* JumpKickRiposteAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequenceBase* KickAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequenceBase* KickComboAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UAnimSequenceBase* KickRiposteAnimation; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UBlendSpaceBase* HorseUpperBlendSpace1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UBlendSpaceBase* HorseUpperBlendSpace; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UBlendSpaceBase* HorseUpperBlendSpaceUnloaded1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UBlendSpaceBase* HorseUpperBlendSpaceUnloaded; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UBlendSpaceBase* RangedDrawnAdditive; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UBlendSpaceBase* SecondUpperBlendSpace1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UBlendSpaceBase* SecondUpperBlendSpace; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UBlendSpaceBase* SecondUpperBlendSpaceUnloaded1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UBlendSpaceBase* SecondUpperBlendSpaceUnloaded; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UBlendSpaceBase* ShieldHorseUpperBlendSpace1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UBlendSpaceBase* ShieldHorseUpperBlendSpace; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UBlendSpaceBase* ShieldUpperBlendSpace1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UBlendSpaceBase* ShieldUpperBlendSpace; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UBlendSpaceBase* UpperBlendSpace1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UBlendSpaceBase* UpperBlendSpace; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UBlendSpaceBase* UpperBlendSpaceUnloaded1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UBlendSpaceBase* UpperBlendSpaceUnloaded; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UClass* ProjectileClass; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UClass* Quiver; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UClass* RangedReleaseCameraShake; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UCurveVector* RangedDrawSway; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class UPhysicsAsset* PhysicsAsset; //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class USkeletalMesh* CombinedSkeletalMesh; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class USkeletalMeshComponent* AuxiliarySkeletalMeshComponent; //(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class USkeletalMeshComponent* SkeletalMeshComponent; //(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class USoundCue* AmmoRefillSound; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class USoundCue* DrawSound; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class USoundCue* EquipSound; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class USoundCue* FireSound; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class USoundCue* HolsterSound; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class USoundCue* RangedCancelSound; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class USoundCue* ReloadSound1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ClassRefs")
		class USoundCue* ReloadSound; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float AccelerationBonusPercentageEquipped; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float AccelerationBonusPercentageHolstered; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float AutoReloadTime; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float AutoReloadTimeSpent; //(ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float BackpedalSpeedFactorEquipped; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float CullDistanceAuxiliaryHeld; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float CullDistanceAuxiliaryNotHeld; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float CullDistanceHeld; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float CullDistanceNotHeld; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float DrawSoundPlayAtNormalizedTime1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float DrawSoundPlayAtNormalizedTime; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float EquipTimeModifier; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float ExtraSwitchTime; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float ForceAppliedOnDrop; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float MaxHoldDrawTime; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float OffhandIKUpOffset1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float OffhandIKUpOffset; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float RagdollStayTime; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float RangedAirborneSwayBlendInSpeed; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float RangedAirborneSwayBlendOutSpeed; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float RangedCancelTime; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float RangedDrawFOVOffset; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float RangedDrawSpeedFactor; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float RangedDrawSpeedFactorWithRangerPerk; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float RangedDrawTime; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float RangedDrawTremblingFrequency; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float RangedDrawTremblingMagnitude; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float RangedDrawTremblingMaxAfter; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float RangedDrawTremblingStartAfter; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float RangedReleaseTime; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float RangedReloadFinishReloadNormTime; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float RangedReloadGrabAmmoNormTime; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float RangedReloadTime; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float SecondOffhandIKUpOffset1P; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float SecondOffhandIKUpOffset; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float SecondSubSprintSpeedBonusEquipped; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float SpeedBonusPercentageEquipped; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float SpeedBonusPercentageHolstered; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float SpeedOverrideEquipped; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Floats")
		float SubSprintSpeedBonusEquipped; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Integers")
		int CharacterPointCost; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Integers")
		int HideInGameOverride; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Integers")
		int MaxAmmoBoxRestockAmount; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Integers")
		int MaxAmountPerLoadout; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FEquipmentCustomization AssignedCustomization; //(BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FEquipmentCustomization AutoAssignCustomization; //(Edit, BlueprintVisible)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FRotator RotationOffset; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FRotator SecondRotationOffset; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FTransform ArmoryTransformOffset; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FTransform AuxiliaryMeshOffset; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FTransform DefaultAuxiliaryMeshRelativeTransform; //(BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FTransform DefaultMeshRelativeTransform; //(BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FTransform EquippedOffset; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FTransform RightWeaponBoneCosmeticTransform1P; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FTransform RightWeaponBoneCosmeticTransform; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FTransform SecondRightWeaponBoneCosmeticTransform1P; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FTransform SecondRightWeaponBoneCosmeticTransform; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FVector GripLocationLocal; //(BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FVector LeftShoulderIdleOffset1P; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FVector LeftShoulderOffset1P; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FVector RangedAirborneSway; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FVector RightHandEquipOffset; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FVector RightHandIKPositionOffset; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FVector RightShoulderOffset1P; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FVector SecondGripLocationLocal; //(BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FVector2D RangedDrawSwayLoopSegment; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FVector2D RangedDrawTurnCaps; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Structs")
		struct FVector2D RangedReloadTurnCaps; //(Edit, BlueprintVisible, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		uint8 AutoAssignCustomizationEmblem; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		uint8 AutoAssignCustomizationEmblemColor1; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		uint8 AutoAssignCustomizationEmblemColor2; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Arrays")
		TArray<uint8> Colors = { 0,0,0 }; //(ZeroConstructor, IsPlainOldData)[0x3]
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		uint8 Emblem; //(ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Arrays")
		TArray<uint8> EmblemColors = { 0,0 }; //(ZeroConstructor, IsPlainOldData)[0x2]
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		uint8 LastOwnerTeam; //(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		uint8 LastReplicatedAmmo; //(ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		uint8 MaxAmmo; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		uint8 MaxAmmoWithoutQuiver; //(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		TArray<uint8> PartsId = { 0,0,0 }; //(ZeroConstructor, IsPlainOldData)[0x3]
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		uint8 Pattern; //(BlueprintVisible, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		TArray<uint8> ReplicatedColors = { 0,0,0 }; //(Net, ZeroConstructor, IsPlainOldData)[0x3]
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		uint8 ReplicatedEmblem; //(Net, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		TArray<uint8> ReplicatedEmblemColors = { 0,0 }; //(Net, ZeroConstructor, IsPlainOldData)[0x2]
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		TArray<uint8> ReplicatedPartsId = { 0,0,0 }; //(Net, ZeroConstructor, IsPlainOldData)[0x3]
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		uint8 ReplicatedPattern; //(Net, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		uint8 ReplicatedSkin; //(Net, ZeroConstructor, IsPlainOldData)
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Bytes")
		uint8 Skin; //(ZeroConstructor, IsPlainOldData)

		// Functions
	UFUNCTION(BlueprintCallable)
	void UpdateMaterial(class USkeletalMeshComponent* SkeletalMeshComp);
	UFUNCTION(BlueprintCallable)
	void UpdateInteractionCollision();
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void UpdateEquipmentVisualState();
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void UpdateEquipmentState();
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void SwitchMode();
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	bool ShouldShine();
	UFUNCTION(BlueprintCallable)
	void SetPartsUseAuxiliaryMesh(bool bNewValue);
	UFUNCTION(BlueprintCallable)
	void SetParts(TArray<uint8> NewPartsId, bool bRebuild);
	UFUNCTION(BlueprintCallable)
	void SetLoaded(bool bNewLoaded);
	UFUNCTION(BlueprintCallable)
	void SetColors(TArray<uint8> NewColors);
	UFUNCTION(BlueprintCallable)
	void SetAmmo(uint8 NewAmmo);
	UFUNCTION(BlueprintCallable)
	bool RestockOtherEquipmentOnCharacter(class AMordhauCharacter* Character);
	UFUNCTION(BlueprintCallable)
	void ResetMeshRelativeTransform();
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void RequestAttack(EAttackMove Move, float Angle);
	UFUNCTION(BlueprintCallable)
	void RebuildIfAllReplicated();
	UFUNCTION(BlueprintCallable)
	void RebuildEquipment(bool bDoOnlyQuickJob);
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	bool OnRequestModeSwitch(class AMordhauCharacter* Character);
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	bool OnRequestFire(class AMordhauCharacter* Character);
	UFUNCTION(BlueprintCallable)
	void OnRep_ReplicatedSkin();
	UFUNCTION(BlueprintCallable)
	void OnRep_ReplicatedPattern();
	UFUNCTION(BlueprintCallable)
	void OnRep_ReplicatedPartsId();
	UFUNCTION(BlueprintCallable)
	void OnRep_ReplicatedEmblemColors();
	UFUNCTION(BlueprintCallable)
	void OnRep_ReplicatedEmblem();
	UFUNCTION(BlueprintCallable)
	void OnRep_ReplicatedColors();
	UFUNCTION(BlueprintCallable)
	void OnRep_IsUsingAlternateMode();
	UFUNCTION(BlueprintCallable)
	void OnRep_IsLoaded();
	UFUNCTION(BlueprintCallable)
	void OnRep_Ammo();
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void OnPickedUp(class AMordhauCharacter* Character);
	UFUNCTION(BlueprintCallable)
	void OnPartsChanged();
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void OnLoadedChanged();
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void OnHolsteredOrDropped(class AMordhauCharacter* Character);
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void OnHolstered(class AMordhauCharacter* Character);
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void OnEquipped(class AMordhauCharacter* Character);
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void OnDropped(class AMordhauCharacter* Character);
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void OnAmmoChanged();
	UFUNCTION(BlueprintCallable)
	void MarkSkinSeen(int SkinIdx);
	UFUNCTION(BlueprintCallable)
	void MarkSeen();
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void LocalPlayerTick(float DeltaTime);
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void LocalPlayerLateTick(float DeltaTime);
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void LateTick(float DeltaSeconds);
	UFUNCTION(BlueprintCallable, BlueprintPure)
	bool GetWasSkinSeen(int SkinIdx);
	UFUNCTION(BlueprintCallable, BlueprintPure)
	bool GetWasSeen();
	UFUNCTION(BlueprintCallable)
	struct FEquipmentCustomization GetRandomCustomization(bool bOnlyColors);
	UFUNCTION(BlueprintCallable, BlueprintPure)
	class AMordhauCharacter* GetParentCharacter();
	UFUNCTION(BlueprintCallable, BlueprintPure)
	uint8 GetCurrentMaxAmmo();
	UFUNCTION(BlueprintCallable, BlueprintPure)
	uint8 GetAmmo();
	UFUNCTION()
	class AMordhauProjectile* FireProjectile_Internal(const struct FVector& InOrigin, const struct FRotator& InOrientation, class AController* Controller, float ExpectedDelay, bool bIsLocal);
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void FireProjectile(const struct FVector& Origin, const struct FRotator& Orientation, class AController* OwningController, float ExpectedDelay);
	UFUNCTION(BlueprintCallable)
	struct FEquipmentHolsterInfo FindCurrentHolsterInfo();
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void EquipmentCommand(int Command);
	UFUNCTION(BlueprintCallable)
	void DestroyPhysicsProxy();
	UFUNCTION(BlueprintCallable)
	struct FBoxSphereBounds ComputeAccurateBounds();
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent, BlueprintPure)
	bool CanPerformAttack(class AMordhauCharacter* Character, EAttackMove Move);
	UFUNCTION(BlueprintCallable, BlueprintPure)
	bool BelongsToCharacter();
	UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
	void AssignCustomizationToProjectile(class AMordhauProjectile* Projectile);
	UFUNCTION(BlueprintCallable)
	void AssignCustomization(const struct FEquipmentCustomization& Customization, uint8 CustomizationEmblem, uint8 CustomizationEmblemColor1, uint8 CustomizationEmblemColor2);

};
